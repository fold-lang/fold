
"""
`l1 ++ l2` is a concateneated list of two sublists `l1` and `l2`. The
resulting list is built in linear time to the length of the second list.
"""
@infix left 4 (++)
fun l1 ++ l2 :: List a -> List a -> List a
  List.concat l1 l2
end

-- * --

"""
The standard conditional syntax.
"""
macro if (test) then (a) else (b)
  ...
end

-- * --

-- Getting and adding meta attributes.
assert (get_meta (add_meta 42 "universe") == Some "universe")

-- Meta attribute "universe" is ignored in the evaluation.
assert (add_meta 42 "universe" + 1 == 43)

-- Complex expressions are evaluated before ignoring the attribute.
assert (add_meta (2 + 2) "universe" == 4)

-- Meta attributes are not stored for values.
meta 42 "universe"
assert (get_meta 42 == None)

-- But they are stored in definitions for symbols.
x = add_meta 42 "universe"
assert (x == 42)
assert (get_meta x == Some "universe")

-- In which case the attribute is added to the evaluated value.
x = add_meta (2 + 2) "universe"
assert (x == 4)
assert (get_meta x == Some "universe")

x = meta "universe"


-- * --

define (+) (add_meta plus (infix left 5))

(+) (infix plus left 5)


-- * --



(==) a b = Ord.equal a b
(!=) a b = Ord.not (equal a b)
(> ) a b = Ord.less a b
(>=) a b = not (Ord.less a b)
(< ) a b = Ord.greater a b
(<=) a b = not (Ord.greater a b)

macro unless test (pack body)
  quote
    if not (unquote test)
      unquote (unpack body)
    end
  end
end


-- If expression

macro a `+` b

end


macro x =
  <a very complex expression here>

symbol "coisa"


macro `unless` test body =
  ```
  if not {{test}}
    {{body}}
  end
  ```

unless length list == 0
  print "its ok"
end


`list args...
((symbol `) (symbol list)) ((symbol ...) args)

list 1 2 3 4 5 6 7


.ok 42
?ok 42
$ok 42
#ok 42
@ok 42
!ok 42
*ok 42
`ok 42
:ok 42



((symbol `) (symbol if))   (symbol test)
((symbol `) (symbol then)) (symbol a)
((symbol `) (symbol else)) (symbol b)


`list ...

meta (infix 6) +

infixr 8 |>

empty |> Env.add (Symbol "|>") ()
empty |> Env.add (Symbol "|>") (Form [Name "+"; ])

x `|>` f = f x


-> (define x 42)
-> (meta x "the answer")
-> (meta x)
:: String = "the answer"

-> (Fold.Eval.expand (infix 5 (+)))
:: Code =
  (define )


@infix 5
a + b = OCaml.Int.add


(meta
  (infix 5)
  (define (+ a b)
          (. OCaml Int add)))

a `= b




-- When Macro

when
  a > 3 -> "too big"
  a < 3 -> "too small"
  *     -> "it's three!"
end



(symbol when)(symbol EOL)
  (symbol a) (symbol >) (int 3) (symbol ->) (string "too big")(symbol EOL)
  (symbol a) (symbol <) (int 3) (symbol ->) (string "too small")(symbol EOL)
  (symbol *) (symbol ->) (string "it's three!")(symbol EOL)
(symbol end)(symbol EOL)




if a > 3
  "too big"
else if a < 3
  "too small"
else
  "it's three!"
end

when (pack test_list) =


-- If macro

if Random.int! > 100
  print "too big!"
else
  print "just ok!"
end



macro `when` test body `end`
  if {{test}} then
    {{body}}
  else
    ()
  end
end


-- * --


-- Consider this simple expression that uses prefix and infix rules.
if True then 1 else 0 + sqrt x

-- Here is the environment definitions for the `if` and `+` rules.
-- All other tokens are built with the default prefix and infix rules.

+   => (_ `+` _)
if  => (`if` _ `then` _ `else` _)

-- The parsed expression will look like:
(+ (if True 1 0) x)














