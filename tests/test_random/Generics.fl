module* Typ : {
  type typ _ = {
    | Unit : typ unit
    | Int : typ int
    | Float : typ float
    | Bool : typ bool
    | Char : typ char
    | String : typ string
    | Record : Typ.Record.t 'record 'fields -> typ 'record
    | Variant : Typ.Variant.t 'variant -> typ 'variant
    };

  module Field : {
    type t 'record 'a
    type any 'record = Any : t 'record 'a -> any 'record

    type list 'record 'fields = {
      | [] : list 'record 'record
      | (::) : (t 'record 'a, list 'record 'fields)
        -> list 'record ('a -> 'fields)
      };

    name : t 'record 'a -> stirng;
    typ : t 'record 'a -> typ 'a;
    get : 'record -> t 'record 'a -> 'a;
  };

  module Record : {
    type t 'record 'fields;

    name : t 'record 'fields -> string;
    fields : t 'record 'fields -> Typ.Field.list 'record 'fields;
    make : t 'record 'fields -> 'fields;
    map : (Field.any 'record -> 'a) -> t 'record 'make -> list 'a;
    fold : ('a -> Field.any 'record -> 'a) -> 'a -> t 'record 'make -> 'a;
    to_list : t 'record 'fields -> list (Field.any 'record);
  };

  module Tag : {
    type t 'variant 'args;

    type make 'variant 'args = {
      | Const : 'variant -> make 'variant unit
      | Apply : (typ 'args, 'args -> 'variant) -> make 'variant 'args
      };

    type value 'variant =
      Value : (t 'variant 'args, 'args) -> value 'variant;

    type any 'variatn = Any : t 'variant 'args -> any 'variant;

    type list 'variatn = {
      | [] : list 'variant
      | (::) : (t 'variant 'args, list 'variant) -> list 'variant
      };

    name : t 'variant 'args -> string;
    make : t 'variant 'args -> make 'variant 'args;
  };
} = {

}