// let of_string ?(timezone = None) ts =
//   let get_offset_hm_iso = function
//     | offset_seconds ->
//       let offset_seconds = int_of_float offset_seconds in
//       let signal, offset_seconds =
//         if offset_seconds > 0 then ("+", offset_seconds)
//         else ("-", -offset_seconds (*positive for computing hr and min*))
//       in
//       let hours = offset_seconds / 3600 in
//       let minutes = offset_seconds mod 3600 / 60 in
//       Stdx.fmt "%s%02d:%02d" signal hours minutes
//   in
//   let get_offset_hours_iso_float = function
//     | offset_seconds -> offset_seconds /. 3600.
//   in
//   try
//     let timestamp, offset_seconds = datetime_tz ts in

//     if Option.is_some offset_seconds && Option.is_some timezone then
//       failwith "Timestamp cannot have both timezone and an offset defined"
//     else
//       match offset_seconds with
//       | Some offset_seconds ->
//         {
//           timestamp;
//           offset_seconds = Some offset_seconds;
//           timezone = None;
//           offset_hm_iso = get_offset_hm_iso offset_seconds |> Option.some;
//           offset_hours_iso_float =
//             get_offset_hours_iso_float offset_seconds |> Option.some;
//         }
//       | _ ->
//         {
//           timestamp;
//           offset_seconds = None;
//           timezone;
//           offset_hm_iso = None;
//           offset_hours_iso_float = None;
//         }
//   with Failure _ -> failwith ("Couldn't parse timestamp: " ^ ts)

of_string = ~timezone ts -> {
  let get_offset_hm_iso = offset_seconds -> {
    let offset_seconds = int_of_float offset_seconds;
    let (signal, offset_seconds) =
      if (offset_seconds > 0)
        ("+", +offset_seconds)
        ("-", -offset_seconds); // positive for computing hr and min
    let hours = offset_seconds / 3600;
    let minutes = offset_seconds % 3600 / 60;
    Stdx.fmt "%s%s02d:%02d" signal hours minutes;
  };
  let get_offset_hours_iso_float = offset_seconds -> offset_seconds /. 3600;
  try {
    let (timestamp, offset_seconds) = datetime_tz ts;

    if (Option.is_some offset_seconds && Option.is_some timezone)
      (failwith "Timestamp cannot have both timezone and an offset defined")
    {
        match offset_seconds {
          Some offset_seconds -> {
            ~timestamp,
            offset_seconds = Some offset_seconds,
            timezone = None,
            offset_hm_iso = get_offest_hm_iso offset_seconds |> Option.some,
            offset_hours_iso_float =
              get_offset_hours_iso_float offset_seconds |> Option.some
          },
          _ -> {
            ~timestamp,
            offset_seconds = None,
            ~timezone,
            offset_hm_iso = None,
            offset_hours_iso_float = None
          }
        }
      };
  } {
    Failure _ -> failwith ("Couldn't parse timestamp: " ++ ts)
  };
}
