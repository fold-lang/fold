[ 3 ];;
[ ""; "a"; "abc" ];;
[ x; M.x; M1.M2.M3.x ];;

let a = 1 in
a + 1
;;

let a = 1 in
let b = a + 1 in
Ok b
;;

let a = 1 and b = 2 in
Ok (a + b)
;;

let rec xs = 1 :: xs in
Ok xs
;;

let rec a = 2 - b and b = a + 1 in
Ok (a + b)
;;

let x = 42 in
let rec a = 2 - b and b = a + 1 in
Ok (a + b)
;;

let a = 1 in
()
;;

let a = 1 and b = 2 in
()
;;

let a = 1 in
let b = 2 in
()

let f01 a = a + 1
let f02 = (fun a -> a + 1) + 1

let f03 = function
  | a -> 1
  | b -> 2

let f04 = function
  | a -> 1
  | A | B -> 2

let f a = a + 1
let f () = ()
let f a b = a + b
let f (a : int) = a + 1
let f ~a = a
let f ~a = a
let f ~(a : int) = a
let f ?a:b = b
let f ?(a = 1) b = a + b
let f ?a:(b = 1) c = b + c
let f ?a:(Some b = x) c = b + c
let f ?a:(Some b : int option = x) c = b + c
let f ?a = a
let f ?a:b = b
let ap01 = f a
let ap01 = f a b
let ap02 = f a b c d e

let () =
  f ~a;
  f ~a;
  f ~a:1;
  f ~a:(a : int);
  f ~a:(1 : int);
  f ?a;
  f ?a;
  f ?a:b;
  f ?a:(b : int option)

let x =
  match a with
  | 1 -> 0
  | 2 -> b

let x =
  match a with
  | 1 -> 0

let x =
  match a + b with
  | 1 -> 0
  | 2 -> b

let x =
  ( match a with
  | 1 -> b
  | 2 -> c
  )
  + 100

let x =
  match a with
  | 1 ->
    print_endline "1";
    a
  | x when x > 2 -> b
  | (3 as x) | x -> x

let x =
  match a with
  | 1 -> 0
  | x when x > 0 -> b
  | _ -> 1

let m =
  a |> function
  | 1 -> 0
  | 2 -> b

let mexn01 =
  match a with
  | exception e -> 1
  | exception My_error -> 1
  | exception My_error (a, b, c) -> 1
  | (exception My_error (a, b, c)) as x -> 1
;;

match a with
| _ -> .
;;

[%fl.error "`.` is not an expression"]

let x = try f () with a -> prerr_endline msg

let x =
  try f () with
  | a -> prerr_endline msg
  | b -> bar

let tup01 = (a, b)
let tup02 = (a, b, c)
let tup03 = (a, b, c, d)
let tup04 = ((a, b), (c, d))
let tup05 = (a, (b, c), (d, e, f))
let cons01 = None
let cons02 = Some 1
let cons03 = Some [ 1; 2; 3 ]
let cons04 = Two (1, 2)
let cons05 = Two (1, 2) |> f
let cons06 = ()
let l01 = [ [] ]
let l02 = [ [ [] ] ]
let l03 = [ [ 1 ]; [ 2 ]; []; [ 3; 4 ]; [ 5 ] ]
let l04 = []
let l05 = [ 1 ]
let l06 = [ 1; 2 ]
let l07 = [ 1; 2; 3 ]
let l08 = 0 :: xs
let l09 = 1 :: 2 :: xs
let l10 = [ 1; 2 ]
let l11 = [ 1; 2; 3; 4 ]
let l12 = [ 1; 2; 3; 4; 5; 6 ]
let x = `A
let x = `A `B
let x = `A 42
let x = `A (2 + a)
let x = `A (a, 42)
let x = `A (b, 43)
let x = `A |> f
let x = f `A `B
let x = f `A `B <| `C
let r01 = { a = "A"; b = 1; c = 2 }
let r02 = { a }
let r03 = { a = 1 }
let r04 = { a; b = 1 }
let r05 = { a = 1; b }
let r06 = { a; b; c }
let r07 = { a = 1; f = (fun x -> x + 1); g = (fun x y -> x - y) }
let r08 = { r with a = 23; b = 1 }
let r09 = { r with a = 23; b }
let r10 = { r with a; b = 1 }
let r11 = { r with a }
let r12 = { r with a; b }
let r13 = { r with a = 1 }

let () =
  M.x;
  M.x1.x2;
  M1.M2.x;
  M1.M2.x1.x2;
  M1.M2.M3.x;
  M1.M2.M3.x1.x2.x3;
  M.C;
  M1.M2.C;
  M1.M2.M3.C;
  r.fld;
  (foo 42).fld;
  M1.M2.r.fld;
  M1.M2.r.fld;
  M.r.fld;
  M.x1.x2.x3.x4;
  x1.M.x2;
  x1.M1.M2.x2;
  x1.x2.M1.x3;
  C.fld;
  M.C.fld;
  M1.M2.C.fld;
  M.f v;
  M1.M2.f v;
  M1.M2.M3.f v;
  M.C v;
  M1.M2.C v;
  M1.M2.M3.C v;
  f M.v;
  f M1.M2.v;
  f M1.M2.M3.v;
  f r.fld;
  f r.M.fld;
  f r.M1.M2.fld;
  f M1.r.fld;
  C M.v;
  C M1.M2.v;
  C M1.M2.M3.v;
  M.f M.v;
  M1.f r.M2.fld;
  M1.M2.f M3.M4.v;
  M1.M2.f r.M3.M4.M5.fld;
  M.r.fld v;
  M.M.M.M.M;
  x.x.x.x.x;
  x1.x2.M1.M2.x4.M3.x5;
  M1.M2.x1.x2.M3.M4.x4.M5.x6;
  M1.x1.x2.x3;
  M1.x1.x2.x3.x4;
  M1.x1.x2.x3.x4.M2.M3.x5;
  x1.x2.x3.x4;
  M1.M2.f a M3.b (g M4.c d e);
  f a (M3.g 2) (f2 M4.M5.x) (h M6.c d e);
  f M.a b

let x = if a then b else c

let x =
  if a then (
    x;
    b
  )
  else c

let x =
  if a then (
    x;
    b
  )
  else (
    y;
    c
  )

let x =
  if a then b else c;
  x

let x = (if a then b else c) + 1
let x = (if a then b else c) + 1
let x = if a then b

let x =
  if a then (
    print_newline ();
    b
  )

let x = if a then b + 1
let x = (if a then b) + 1
let x = (if a then b) + 1;;

a;;
a;;

a;
b
;;

a;
b
;;

a;
b;
c
;;

a;
b;
c
;;

f ();
let a = 1 in
a
;;

let a = 1 in
a;
b

let () =
  while e1 do
    e2
  done;
  while x > 1 do
    print "hello";
    f ()
  done

let () =
  for i = e1 to e2 do
    e3
  done;
  for i = e1 downto e2 do
    e3
  done;
  for i = e1 to e2 do
    print "hello";
    f ()
  done

let () =
  (x : t);
  2 + ((x : int) * 2);
  f (x : int) y;
  f (xs : int list)
;;

let module X = struct
  let x = 1
end in
X.x
;;

let module _ = struct
  let x = 1
end in
2
;;

let a = 2 in
let module X = struct
  let x = 1
end in
X.x
;;

let a = 2 in
let module _ = struct
  let x = 1
end in
2
;;

let exception My_error in
1
;;

let exception My_error of int in
1
;;

let exception My_error of int * bool in
1
;;

let open M in
a
;;

let a = 1 in
let open M in
a
;;

let open M in
let a = 1 in
a
;;

();;
1;;
"abc";;
print_newline ();;
print_endline (string_of_int (a + b));;
2 + 2

let val_1 = 1

let val_2 = 1
and x = 2

let val_3 = 1
and a = 2
and b = c

let rec val_4 = 1

let rec val_4 = 1
and a = 1

let a = (42 + 10 - 2) / 2
let () = ()
let () = a

exception A
exception A of t1
exception A of t1 * t2

external prim1 : t = "x"
external prim2 : t1 -> 'a t2 = "x"

module type S = sig
  external prim1 : t = "x"
  external prim2 : t1 -> 'a t2 = "x"
end

let A = a
let M.A = a
let M1.M2.A = a
let (A 1) = a
let (M.A 1) = a
let (M1.M2.A 1) = a
let (A (1, 2)) = a
let (M.A (1, 2)) = a
let (M1.M2.A (1, 2)) = a
let (M1.M2.A (M3.B 1, 2, M4.M5.C (3, "x"))) = a
let [] = x
let (1 :: []) = x
let [ 1; 2 ] = x
let (1 :: 2 :: xs) = x
let ([] :: [ 1; 2 ] :: xs) = x
let (1 : int) = x
let (A | B) = x
let f a = a + 1
let f () = ()
let f a b = a + b
let f (a : int) = a + 1
let f ~a = a
let f ~a = a
let f ~(a : int) = a
let f ?a:b = b
let f ?(a = 1) b = a + b
let f ?a:(b = 1) c = b + c
let f ?a:(Some b = x) c = b + c
let f ?a:(Some b : int option = x) c = b + c
let f ?a = a
let f ?a:b = b

type f = a -> b
type f = a -> b -> c -> d
type f = a:t -> b
type f = x -> a:t -> b
type f = a:t -> b -> c
type f = ?a:t -> b
type f = a:t -> ?b:t -> c

module type S = sig
  val v : a -> b
  val v : a -> b -> c -> d
  val v : a:t -> b
  val v : x -> a:t -> b
  val v : a:t -> b -> c
  val v : ?a:t -> b
  val v : a:t -> ?b:t -> c
end

let x = xs |> List.map (function x -> x + 1)

let x =
  xs
  |> List.map (function
       | 1 -> a
       | 2 -> b
       )

module M1 = X
module M1 = M2.M3.X
module M2 = struct end

module M3 = struct
  let a = 1
  let b = 2
end

module M4 : sig end = struct end

module M5 : sig
  val x : int
end = struct
  let x = 42
end

module M6 : sig
  val x : int
  val y : int
end = struct
  let x = 42
  let y = 2
end

module type S1 = sig
  val a : int
  val b : bool
end

open M

let (v_constraint_1 : int) = 42
let (v_constraint_2 : (string * int) list) = [ ("a", 2); ("b", 3) ]

type t
type 'a t
type ('a, 'b) t
type ('a, 'b, 'c) t
type t = a
type 'a t = a
type ('a, 'b) t = a
type ('a, 'b, 'c) t = a
type nonrec t
type nonrec 'a t
type nonrec ('a, 'b) t
type nonrec ('a, 'b, 'c) t
type nonrec t = a
type nonrec 'a t = a
type nonrec ('a, 'b) t = a
type nonrec ('a, 'b, 'c) t = a
type t = a
type t = a list
type t = a list list
type t = a * b
type t = (a * b) t
type t = (a * b, 'x) t
type t = 'a t
type t = ('a, 'b) t
type t = ('a, 'b, 'c) t
type t = 'a M.t
type t = ('a, 'b) M.t
type t = ('a, 'b, 'c) M.t
type t = int * bool
type t = A
type t = A of int
type t = A of int * string
type t = A
type t = A of int
type t = A of int * string
type t = A of (int * string)
type t = A | B | C
type t = A | B of int * bool
type t = u = A
type t = u = A | B of int
type t = { a : int }
type t = { a : int; b : bool list }
type t = u = { a : int; b : bool list }
type t = { mutable a : int; mutable b : bool list }
type t = { a : 'a. int }
type t = { a : 'a 'b. int }
type t = { a : 'a. int; b : 'b 'c 'd. 'b }
type t = { a : 'b. 'b t2 -> (('c, 'd) t3 -> 'd) option }
type t = A : int
type t = A : int -> t
type t = A : (t1 * t2) -> t3
type t = A : (t1 -> t2) -> t3
type 'a t = A : int t
type 'a t = A : int -> int t
type 'a t = A : (t1 * t2) -> t2 t
type 'a t = A : (t1 -> t2) -> (t1 -> t2) t
type t = A : a | B : b
type t = A : a | B : b | C : (c1 * c2) -> c3

let v : type a. a -> int = x
let v : type a b. a * b -> int = x

type t = ..
type t += A
type t += A of int
type t += A of int * bool
type t += A of (int * bool)
type 'a t += A
type ('a, 'b) t += A
type t += A : t
type t += A : a -> t
type _ t
type _ t += A
type ' a'b t
type a [@@attr1]

external a : t = "x" [@@attr2]

let x = [%fl.macro.expression "mc1" ("{}" 2)]
let x = [%fl.macro.expression "mc2" ("{}" 2)] + 1

let x =
  [%fl.macro.expression "mc3" (( < ), div, ( > ), "hello", ( </ ), div, ( > ))]

let x = if a > 1 then "yes" else if a == 0 then "maybe" else "no";;

x;
( + );
( * );
( mod );
x;
( mod );
foo bar
