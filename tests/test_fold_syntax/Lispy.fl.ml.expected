;;a
;;f a b
;;42
;;()
let x = 1
let x = 1
and y = 2
let a = ((42 + 10) - 2) / 2
;;print_newline ()
;;print_endline (string_of_int (a + b))
let x = None
let x = Some 1
let x = Some [1; 2; 3]
let x = Two (1, 2)
let x = (Two (1, 2)) |> f
let () = ()
let () = let a = 1 in a
let () = let a = 1 in ()
let () = let a = 1
         and b = 2 in ()
let () = let a = 1 in let b = 2 in ()
;;print_endline "hello"
;;print_endline "hello"; print_endline "world"
let xs = []
let xs = [1]
let xs = [1; 2]
let xs = [1; 2; 3]
let xs = 0 :: xs
let xs = 1 :: 2 :: xs
let f a = a + 1
let sum b a = a + b
let f a = a + 1
let f = (fun a -> a + 1) + 1
let x = function | a -> 1 | b -> 2
let x = if a then b else c
let x = if a then (x; b) else c
let x = if a then (x; b) else (y; c)
let x = if a then b else c; x
let x = (if a then b else c) + 1
let x = if a then b
let x = if a then (print_newline (); b)
let x = if a then b + 1
let x = (if a then b) + 1
let x = match a with | 1 -> 0 | 2 -> b
let x = match a + b with | 1 -> 0 | 2 -> b
let x = (match a with | 1 -> b | 2 -> c) + 100
let x = match a with | 1 -> (print_endline "1"; a) | 2 -> b
module M1 = X
module M2 = struct  end
module M3 = struct let a = 1
                   let b = 2 end
open M
let x = let a = 1 in let open M in a
let x = let open M in let a = 1 in a
let x = if a > 1 then "yes" else if a == 0 then "maybe" else "no"
