a;
f a b;
42;
();


// Values
x = 1;
x = 1, y = 2;

let a = (42 + 10 - 2) / 2;
let b = calc! (1000 + 1);
let c = xml! <p> "hello" </p> + 1;
print_newline ();
print_endline (string_of_int (a + b));


// Constructors
let x = None;
let x = Some 1;
let x = Some [1, 2, 3];
let x = Two 1 2;
let x = Two 1 2 |> f;

// Unit pattern, implicit let unit
let () = ();
let () = {
  let a = 1;
  a
};
let () = {
  let a = 1
};
let () = {
  let a = 1, b = 2
};
let () = {
  let a = 1;
  let b = 2
};

// Scopes
// { }; // array? unit?
{ print_endline "hello" };
{
  print_endline "hello";
  print_endline "world"
};


// Lists
let xs = [];
let xs = [1];
let xs = [1, 2];
let xs = [1, 2, 3];
let xs = [0 & xs];
let xs = [1, 2 & xs];

// Records
//let x = { name = "Alan", age = 28 }
//let x = { alan & name = "Alan" }

// Lambda
let f = fn a -> a + 1;
let sum = fn a b -> a + b;

// This matches on an singleton array
// let f = fn {a} -> a + 1;

// This matches on a record
//let f = fn {~a} -> a + 1;

// This wraps a single case.
let f = fn { a -> a + 1 };
//let f = fn {
//  | a -> a + 1
//  };
// [BUG] + should beat fn.
//let f = fn { a -> a + 1 } + 1;

// Lambda with cases
let x = fn { a -> 1, b -> 2 };

// if else
let x = if a { b } else { c };
let x = if a { x; b } else { c };
let x = if a { x; b } else { y; c };
let x = { if a { b } else { c }; x };
let x = if a { b } else { c } + 1;
// err
//let x = if a { b } else c + 1;

// if
let x = if a { b };
let x = if a { print_newline (); b };
let x = if a { b + 1 };
let x = if a { b } + 1;

// Syntax errors
//let x = if a; x then b else c;
//let x = if a then b; x else c;
// let + 1;

// match
let x =
  match a {
    1 -> 0,
    2 -> b
  };
let x =
  match (a + b) {
    1 -> 0,
    2 -> b
  };
let x = match a { 1 -> b, 2 -> c } + 100;
let x =
  match a {
    1 -> {
      print_endline "1";
      a
    },
    2 -> b
  };

// Module bindings
module M1 = X;
module M2 = {};
module M3 = {
  let a = 1;
  let b = 2
};

// open
open M;
let x = {
  let a = 1;
  open M;
  a
};
let x = {
  open M;
  let a = 1;
  a
}
