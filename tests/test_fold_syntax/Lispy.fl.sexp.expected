(;
  !(do {; a (f a b) (f a b c d e) 42 ()})
  !(= x 1)
  (, !(= x 1) !(= y 2))
  !(= a (/ ((- (+ 42 10) 2)) 2))
  (print_newline ())
  (print_endline ((string_of_int ((+ a b)))))
  !(= x None)
  !(= x (Some 1))
  !(= x (Some [, 1 2 3]))
  !(= x (Two 1 2))
  !(= x (|> (Two 1 2) f))
  !(= x !(# A))
  !(= x (!(# A) !(# B)))
  !(= x (!(# A) 42))
  !(= x (!(# A) ((+ 2 a))))
  !(= x (!(# A) a 42))
  !(= x (!(# A) (, b 43)))
  !(= x (|> !(# A) f))
  !(= x (f !(# A) !(# B)))
  !(= x (<| (f !(# A) !(# B)) !(# C)))
  !(do
     {;
       !(ident M x)
       !(field !(ident M x1) x2)
       !(ident M1 M2 x)
       !(field !(ident M1 M2 x1) x2)
       !(ident M1 M2 M3 x)
       !(field !(ident M1 M2 M3 x1) x2 x3)
       !(ident M C)
       !(ident M1 M2 C)
       !(ident M1 M2 M3 C)
       !(field r fld)
       !(field ((foo 42)) fld)
       !(field (!(ident M1 M2 r)) fld)
       !(field !(ident M1 M2 r) fld)
       !(field !(ident M r) fld)
       !(field !(ident M x1) x2 x3 x4)
       !(field x1 !(ident M x2))
       !(field x1 !(ident M1 M2 x2))
       !(field !(field x1 x2) !(ident M1 x3))
       !(field (C) fld)
       !(field (!(ident M C)) fld)
       !(field (!(ident M1 M2 C)) fld)
       (!(ident M f) v)
       (!(ident M1 M2 f) v)
       (!(ident M1 M2 M3 f) v)
       (!(ident M C) v)
       (!(ident M1 M2 C) v)
       (!(ident M1 M2 M3 C) v)
       (f !(ident M v))
       (f !(ident M1 M2 v))
       (f !(ident M1 M2 M3 v))
       (f !(field r fld))
       (f !(field r !(ident M fld)))
       (f !(field r !(ident M1 M2 fld)))
       (f !(field !(ident M1 r) fld))
       (C !(ident M v))
       (C !(ident M1 M2 v))
       (C !(ident M1 M2 M3 v))
       (!(ident M f) !(ident M v))
       (!(ident M1 f) !(field r !(ident M2 fld)))
       (!(ident M1 M2 f) !(ident M3 M4 v))
       (!(ident M1 M2 f) !(field r !(ident M3 M4 M5 fld)))
       (!(field !(ident M r) fld) v)
       !(ident M M M M M)
       !(field x x x x x)
       !(field !(field !(field x1 x2) !(ident M1 M2 x4)) !(ident M3 x5))
       !(field
          !(field !(field !(ident M1 M2 x1) x2) !(ident M3 M4 x4))
          !(ident M5 x6))
       !(field !(field !(ident M1 x1) x2) x3)
       !(field !(field !(ident M1 x1) x2 x3) x4)
       !(field
          !(field !(field !(field !(ident M1 x1) x2) x3) x4)
          !(ident M2 M3 x5))
       !(field !(field !(field x1 x2) x3) x4)})
  !(= val_1 1)
  (, !(= val_2 1) !(= x 2))
  (, !(= val_3 1) !(= a 2) !(= b c))
  !(rec !(= val_4 1))
  !(rec (, !(= val_4 1) !(= a 1)))
  !(= () ())
  !(= () a)
  !(= let_01 {; !(let !(= a 1)) (+ a 1)})
  !(= let_02 {; !(let !(= a 1)) !(let !(= b (+ a 1))) (Ok b)})
  !(= let_03 {; !(let (, !(= a 1) !(= b 2))) (Ok ((+ a b)))})
  !(= let_04 {; !(rec !(= xs [!(& 1 xs)])) (Ok xs)})
  !(= let_05 {; !(rec (, !(= a (- 2 b)) !(= b (+ a 1)))) (Ok ((+ a b)))})
  !(=
     let_06
     {;
       !(let !(= x 42))
       !(rec (, !(= a (- 2 b)) !(= b (+ a 1))))
       (Ok ((+ a b)))})
  !(= let_07 {!(let !(= a 1))})
  !(= let_08 {!(let (, !(= a 1) !(= b 2)))})
  !(= let_09 {; !(let !(= a 1)) !(let !(= b 2))})
  {a}
  {; a}
  {; a b}
  {; a b}
  {; a b c}
  {; a b c}
  {; (f ()) !(let !(= a 1)) a}
  !(= x [])
  !(= x [1])
  !(= x [, 1 2])
  !(= x [, 1 2 3])
  !(= x [!(& 0 xs)])
  !(= x [!(& (, 1 2) xs)])
  !(= [] x)
  !(= [1] x)
  !(= [, 1 2] x)
  !(= [!(& (, 1 2) xs)] x)
  !(= [!(& (, [] [, 1 2]) xs)] x)
  !(= !(: 1 int) x)
  !(= record_create_triple {, !(= a "A") !(= b 1) !(= c 2)})
  !(= record_create_single_pun {!(~ a)})
  !(= record_create_single {!(= a 1)})
  !(= record_create_double_mixed_1 {, !(~ a) !(= b 1)})
  !(= record_create_double_mixed_2 {, !(= a 1) !(~ b)})
  !(= record_create_triple {, !(~ a) !(~ b) !(~ c)})
  !(=
     record_create_functions
     {, !(= a 1) !(= f !(-> x (+ x 1))) !(= g !(-> (x y) (- x y)))})
  !(= record_update_double {!(& r (, !(= a 23) !(= b 1)))})
  !(= record_update_double_mixed_1 {!(& r (, !(= a 23) !(~ b)))})
  !(= record_update_double_mixed_2 {!(& r (, !(~ a) !(= b 1)))})
  !(= record_update_single_pun {!(& r !(~ a))})
  !(= record_update_double_pun {!(& r (, !(~ a) !(~ b)))})
  !(= record_update_single {!(& r !(= a 1))})
  !(= f !(-> a (+ a 1)))
  !(= f !(-> () ()))
  !(= f !(-> (a b) (+ a b)))
  !(= f !(-> (!(: a int)) (+ a 1)))
  !(= f !(-> !(~ a) a))
  !(= f !(-> !(~ (a)) a))
  !(= f !(-> !(~ (!(: a int))) a))
  !(= f !(-> !(~ (!(as a b))) b))
  !(= f !(-> (!(~ (!(= a 1))) b) (+ a b)))
  !(= f !(-> (!(~ (!(= !(as a b) 1))) c) (+ b c)))
  !(= f !(-> (!(~ (!(= !(as a ((Some b))) x))) c) (+ b c)))
  !(= f !(-> (!(~ (!(= !(as a !(: ((Some b)) (option int))) x))) c) (+ b c)))
  !(= f !(-> !(~? a) a))
  !(= f !(-> !(~ (!(as !(? a) b))) b))
  !(do
     {;
       (f !(~ a))
       (f !(~ (a)))
       (f !(~ (!(= a 1))))
       (f !(~ (!(: a int))))
       (f !(~ (!(= !(: a int) 1))))
       (f !(~? a))
       (f !(~ (!(? a))))
       (f !(~ (!(= !(? a) b))))
       (f !(~ (!(= !(: !(? a) (int option)) b))))})
  !(type !(= f !(-> a b)))
  !(type !(= f !(-> a !(-> b !(-> c d)))))
  !(type !(= f !(-> !(~ (!(: a t))) b)))
  !(type !(= f !(-> x !(-> !(~ (!(: a t))) b))))
  !(type !(= f !(-> !(~ (!(: a t))) !(-> b c))))
  !(type !(= f !(-> !(~ (!(: !(? a) t))) b)))
  !(type !(= f !(-> !(~ (!(: a t))) !(-> !(~ (!(: !(? b) t))) c))))
  !(sig
     !(=
        S
        {;
          !(: v !(-> a b))
          !(: v !(-> a !(-> b !(-> c d))))
          !(: v !(-> !(~ (!(: a t))) b))
          !(: v !(-> x !(-> !(~ (!(: a t))) b)))
          !(: v !(-> !(~ (!(: a t))) !(-> b c)))
          !(: v !(-> !(~ (!(: !(? a) t))) b))
          !(: v !(-> !(~ (!(: a t))) !(-> !(~ (!(: !(? b) t))) c)))}))
  !(= f {!(-> a (+ a 1))})
  !(= f (+ {!(-> a (+ a 1))} 1))
  !(= x {, !(-> a 1) !(-> b 2)})
  !(= x (|> xs (!(ident List map) {!(-> x (+ x 1))})))
  !(= x !(if a b c))
  !(= x !(if a {; x b} {c}))
  !(= x !(if a {; x b} {; y c}))
  !(= x {; !(if a {b} {c}) x})
  !(= x (+ !(if a {b} {c}) 1))
  !(= x (+ !(if a b c) 1))
  !(= x !(if a {b}))
  !(= x !(if a {; (print_newline ()) b}))
  !(= x !(if a {(+ b 1)}))
  !(= x (+ !(if a {b}) 1))
  !(= x (+ !(if a b) 1))
  !(= x !(match a {, !(-> 1 0) !(-> 2 b)}))
  !(= x !(match a {!(-> 1 0)}))
  !(= x !(match ((+ a b)) {, !(-> 1 0) !(-> 2 b)}))
  !(= x (+ !(match a {, !(-> 1 b) !(-> 2 c)}) 100))
  !(= x !(match a {, !(-> 1 {; (print_endline "1") a}) !(-> 2 b)}))
  !(= x !(match a {, !(-> 1 0) !(-> !(_if_ x (> x 0)) b) !(-> _ 1)}))
  !(= x (|> a {, !(-> 1 0) !(-> 2 b)}))
  !(= x !(try ((f ())) {!(-> a (prerr_endline msg))}))
  !(= x !(try ((f ())) {, !(-> a (prerr_endline msg)) !(-> b bar)}))
  !(mod !(= M1 X))
  !(mod !(= M1 !(ident M2 M3 X)))
  !(mod !(= M2 {}))
  !(mod !(= M3 {; !(= a 1) !(= b 2)}))
  !(mod !(= !(: M4 {}) {}))
  !(mod !(= !(: M5 {!(: x int)}) {!(= x 42)}))
  !(mod !(= !(: M6 {; !(: x int) !(: y int)}) {; !(= x 42) !(= y 2)}))
  !(sig !(= S1 {; !(: a int) !(: b bool)}))
  !(open M)
  !(= x {; !(let !(= a 1)) !(open M) a})
  !(= x {; !(open M) !(let !(= a 1)) a})
  !(do {; !(while e1 e2) !(while ((> x 1)) {; (print "hello") (f ())})})
  !(do
     {;
       !(for (!(= i !(to e1 e2))) e3)
       !(for (!(= i !(downto e1 e2))) e3)
       !(for (!(= i !(to e1 e2))) {; (print "hello") (f ())})})
  !(do
     {;
       !(: x t)
       (+ 2 (* (!(: x int)) 2))
       (f (!(: x int)) y)
       (f (!(: xs (list int))))})
  !(= !(: v_constraint_1 int) 42)
  !(= !(: v_constraint_2 (list (, string int))) [, (, "a" 2) (, "b" 3)])
  !(type t)
  !(type nonrec t)
  !(type !(= t int))
  !(type !(= t (list int)))
  !(type !(= t (list ((list int)))))
  !(type !(= (nonrec t) int))
  !(type !(= t (, int bool)))
  !(type !(= t A))
  !(type !(= t (A int)))
  !(type !(= t (A int string)))
  !(type !(= t {A}))
  !(type !(= t {(A int)}))
  !(type !(= t {(A int string)}))
  !(type !(= t {(A (, int string))}))
  !(type !(= t {!(| A B C)}))
  !(type !(= t {!(| A (B int bool))}))
  !(type !(= t (== u A)))
  !(type !(= t (== u {!(| A (B int))})))
  !(type !(= t {, !(: a int) !(: b (list bool))}))
  !(type !(= t (== u {, !(: a int) !(: b (list bool))})))
  !(type !(= t {, !(: a (mutable int)) !(: b (mutable ((list bool))))}))
  !(type !(= t ..))
  !(= x !(mc1 (2)))
  !(= x (+ !(mc2 (2)) 1))
  !(= x !(mc3 {(< div > "hello" </ div >)}))
  !(= x !(if {, !(-> (> a 1) "yes") !(-> (== a 0) "maybe") !(-> else "no")})))
