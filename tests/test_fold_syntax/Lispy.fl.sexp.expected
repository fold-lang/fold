(;
  [3]
  [, "" "a" "abc"]
  [, x !(ident M x) !(ident M1 M2 M3 x)]
  {; !(let !(= a 1)) (+ a 1)}
  {; !(let !(= a 1)) !(let !(= b (+ a 1))) (Ok b)}
  {; !(let (, !(= a 1) !(= b 2))) (Ok ((+ a b)))}
  {; !(rec !(= xs [!(& 1 xs)])) (Ok xs)}
  {; !(rec (, !(= a (- 2 b)) !(= b (+ a 1)))) (Ok ((+ a b)))}
  {; !(let !(= x 42)) !(rec (, !(= a (- 2 b)) !(= b (+ a 1)))) (Ok ((+ a b)))}
  {!(let !(= a 1))}
  {!(let (, !(= a 1) !(= b 2)))}
  {; !(let !(= a 1)) !(let !(= b 2))}
  !(let !(= f01 !(fn {!(-> a (+ a 1))})))
  !(let !(= f02 (+ !(fn {!(-> a (+ a 1))}) 1)))
  !(let !(= f03 !(fn {, !(-> a 1) !(-> b 2)})))
  !(let !(= f04 !(fn {, !(-> a 1) !(-> (!(or A B)) 2)})))
  !(let !(= f !(-> !(fn a) (+ a 1))))
  !(let !(= f !(-> !(fn ()) ())))
  !(let !(= f !(-> !(fn a b) (+ a b))))
  !(let !(= f !(-> !(fn (!(: a int))) (+ a 1))))
  !(let !(= f !(-> !(fn !(~ a)) a)))
  !(let !(= f !(-> !(fn !(~ (a))) a)))
  !(let !(= f !(-> !(fn !(~ (!(: a int)))) a)))
  !(let !(= f !(-> !(fn !(~ (!(as a b)))) b)))
  !(let !(= f !(-> !(fn !(~ (!(= a 1))) b) (+ a b))))
  !(let !(= f !(-> !(fn !(~ (!(= !(as a b) 1))) c) (+ b c))))
  !(let !(= f !(-> !(fn !(~ (!(= !(as a ((Some b))) x))) c) (+ b c))))
  !(let
     !(=
        f
        !(->
           !(fn !(~ (!(= !(as a (!(: (Some b) (option [int])))) x))) c)
           (+ b c))))
  !(let !(= f !(-> !(fn !(~? a)) a)))
  !(let !(= f !(-> !(fn !(~ (!(as !(? a) b)))) b)))
  !(let !(= ap01 (f a)))
  !(let !(= ap01 (f a b)))
  !(let !(= ap02 (f a b c d e)))
  !(do
     {;
       (f !(~ a))
       (f !(~ (a)))
       (f !(~ (!(= a 1))))
       (f !(~ (!(: a int))))
       (f !(~ (!(= !(: a int) 1))))
       (f !(~? a))
       (f !(~ (!(? a))))
       (f !(~ (!(= !(? a) b))))
       (f !(~ (!(= !(: !(? a) (option [int])) b))))})
  !(let !(= x !(match a {!(on !(-> 1 0) !(-> 2 b))})))
  !(let !(= x !(match a {!(on !(-> 1 0))})))
  !(let !(= x !(match ((+ a b)) {!(on !(-> 1 0) !(-> 2 b))})))
  !(let !(= x (+ !(match a {!(on !(-> 1 b) !(-> 2 c))}) 100)))
  !(let
     !(=
        x
        !(match
           a
           {!(on
               !(-> 1 {; (print_endline "1") a})
               !(-> !(_if_ x (> x 2)) b)
               !(-> !(or !(as 3 x) x) x))})))
  !(let
     !(= x !(match a {!(on !(-> 1 0) !(-> !(_if_ x (> x 0)) b) !(-> _ 1))})))
  !(let !(= m (|> a !(fn {!(on !(-> 1 0) !(-> 2 b))}))))
  !(let
     !(=
        mexn01
        !(match
           a
           {!(on
               !(-> !(exception e) 1)
               !(-> !(exception My_error) 1)
               !(-> !(exception My_error a b c) 1)
               !(-> !(as !(exception My_error a b c) x) 1))})))
  {!(match a {!(on !(-> _ .))})}
  {!(fl_expression {.})}
  !(let !(= x !(try ((f ())) {!(on !(-> a (prerr_endline msg)))})))
  !(let
     !(= x !(try ((f ())) {!(on !(-> a (prerr_endline msg)) !(-> b bar))})))
  !(let !(= tup01 (, a b)))
  !(let !(= tup02 (, a b c)))
  !(let !(= tup03 (, a b c d)))
  !(let !(= tup04 (, (, a b) (, c d))))
  !(let !(= tup05 (, a (, b c) (, d e f))))
  !(let !(= cons01 None))
  !(let !(= cons02 (Some 1)))
  !(let !(= cons03 (Some [, 1 2 3])))
  !(let !(= cons04 (Two 1 2)))
  !(let !(= cons05 (|> (Two 1 2) f)))
  !(let !(= cons06 ()))
  !(let !(= l01 [[]]))
  !(let !(= l02 [[[]]]))
  !(let !(= l03 [, [1] [2] [] [, 3 4] [5]]))
  !(let !(= l04 []))
  !(let !(= l05 [1]))
  !(let !(= l06 [, 1 2]))
  !(let !(= l07 [, 1 2 3]))
  !(let !(= l08 [!(& 0 xs)]))
  !(let !(= l09 [!(& (, 1 2) xs)]))
  !(let !(= l10 [!(& 1 [2])]))
  !(let !(= l11 [!(& 1 [!(& 2 [, 3 4])])]))
  !(let !(= l12 [!(& (, 1 2) [!(& (, 3 4) [, 5 6])])]))
  !(let !(= x !(# A)))
  !(let !(= x (!(# A) !(# B))))
  !(let !(= x (!(# A) 42)))
  !(let !(= x (!(# A) ((+ 2 a)))))
  !(let !(= x (!(# A) a 42)))
  !(let !(= x (!(# A) (, b 43))))
  !(let !(= x (|> !(# A) f)))
  !(let !(= x (f !(# A) !(# B))))
  !(let !(= x (<| (f !(# A) !(# B)) !(# C))))
  !(let !(= r01 {, !(= a "A") !(= b 1) !(= c 2)}))
  !(let !(= r02 {!(~ a)}))
  !(let !(= r03 {!(= a 1)}))
  !(let !(= r04 {, !(~ a) !(= b 1)}))
  !(let !(= r05 {, !(= a 1) !(~ b)}))
  !(let !(= r06 {, !(~ a) !(~ b) !(~ c)}))
  !(let
     !(=
        r07
        {,
          !(= a 1)
          !(= f !(-> !(fn x) (+ x 1)))
          !(= g !(-> !(fn x y) (- x y)))}))
  !(let !(= r08 {!(& r (, !(= a 23) !(= b 1)))}))
  !(let !(= r09 {!(& r (, !(= a 23) !(~ b)))}))
  !(let !(= r10 {!(& r (, !(~ a) !(= b 1)))}))
  !(let !(= r11 {!(& r !(~ a))}))
  !(let !(= r12 {!(& r (, !(~ a) !(~ b)))}))
  !(let !(= r13 {!(& r !(= a 1))}))
  !(do
     {;
       !(ident M x)
       !(field !(ident M x1) x2)
       !(ident M1 M2 x)
       !(field !(ident M1 M2 x1) x2)
       !(ident M1 M2 M3 x)
       !(field !(ident M1 M2 M3 x1) x2 x3)
       !(ident M C)
       !(ident M1 M2 C)
       !(ident M1 M2 M3 C)
       !(field r fld)
       !(field ((foo 42)) fld)
       !(field (!(ident M1 M2 r)) fld)
       !(field !(ident M1 M2 r) fld)
       !(field !(ident M r) fld)
       !(field !(ident M x1) x2 x3 x4)
       !(field x1 !(ident M x2))
       !(field x1 !(ident M1 M2 x2))
       !(field !(field x1 x2) !(ident M1 x3))
       !(field (C) fld)
       !(field (!(ident M C)) fld)
       !(field (!(ident M1 M2 C)) fld)
       (!(ident M f) v)
       (!(ident M1 M2 f) v)
       (!(ident M1 M2 M3 f) v)
       (!(ident M C) v)
       (!(ident M1 M2 C) v)
       (!(ident M1 M2 M3 C) v)
       (f !(ident M v))
       (f !(ident M1 M2 v))
       (f !(ident M1 M2 M3 v))
       (f !(field r fld))
       (f !(field r !(ident M fld)))
       (f !(field r !(ident M1 M2 fld)))
       (f !(field !(ident M1 r) fld))
       (C !(ident M v))
       (C !(ident M1 M2 v))
       (C !(ident M1 M2 M3 v))
       (!(ident M f) !(ident M v))
       (!(ident M1 f) !(field r !(ident M2 fld)))
       (!(ident M1 M2 f) !(ident M3 M4 v))
       (!(ident M1 M2 f) !(field r !(ident M3 M4 M5 fld)))
       (!(field !(ident M r) fld) v)
       !(ident M M M M M)
       !(field x x x x x)
       !(field !(field !(field x1 x2) !(ident M1 M2 x4)) !(ident M3 x5))
       !(field
          !(field !(field !(ident M1 M2 x1) x2) !(ident M3 M4 x4))
          !(ident M5 x6))
       !(field !(field !(ident M1 x1) x2) x3)
       !(field !(field !(ident M1 x1) x2 x3) x4)
       !(field
          !(field !(field !(field !(ident M1 x1) x2) x3) x4)
          !(ident M2 M3 x5))
       !(field !(field !(field x1 x2) x3) x4)
       (!(ident M1 M2 f) a !(ident M3 b) ((g !(ident M4 c) d e)))
       (f
         a
         ((!(ident M3 g) 2))
         ((f2 !(ident M4 M5 x)))
         ((h !(ident M6 c) d e)))
       (f !(ident M a) b)})
  !(let !(= x !(if a b c)))
  !(let !(= x !(if a {; x b} {c})))
  !(let !(= x !(if a {; x b} {; y c})))
  !(let !(= x {; !(if a {b} {c}) x}))
  !(let !(= x (+ !(if a {b} {c}) 1)))
  !(let !(= x (+ !(if a b c) 1)))
  !(let !(= x !(if a {b})))
  !(let !(= x !(if a {; (print_newline ()) b})))
  !(let !(= x !(if a {(+ b 1)})))
  !(let !(= x (+ !(if a {b}) 1)))
  !(let !(= x (+ !(if a b) 1)))
  {a}
  {; a}
  {; a b}
  {; a b}
  {; a b c}
  {; a b c}
  {; (f ()) !(let !(= a 1)) a}
  {; !(let !(= a 1)) a b}
  !(do {; !(while e1 e2) !(while ((> x 1)) {; (print "hello") (f ())})})
  !(do
     {;
       !(for (!(= i !(to e1 e2))) e3)
       !(for (!(= i !(downto e1 e2))) e3)
       !(for (!(= i !(to e1 e2))) {; (print "hello") (f ())})})
  !(do
     {;
       !(: x t)
       (+ 2 (* (!(: x int)) 2))
       (f (!(: x int)) y)
       (f (!(: xs (list [int]))))})
  {; !(mod !(= X {!(let !(= x 1))})) !(ident X x)}
  {; !(mod !(= _ {!(let !(= x 1))})) 2}
  {; !(let !(= a 2)) !(mod !(= X {!(let !(= x 1))})) !(ident X x)}
  {; !(let !(= a 2)) !(mod !(= _ {!(let !(= x 1))})) 2}
  {; !(exception My_error) 1}
  {; !(exception My_error int) 1}
  {; !(exception My_error int bool) 1}
  {; !(open M) a}
  {; !(let !(= a 1)) !(open M) a}
  {; !(open M) !(let !(= a 1)) a}
  ()
  1
  "abc"
  (print_newline ())
  (print_endline ((string_of_int ((+ a b)))))
  (+ 2 2)
  !(let !(= val_1 1))
  !(let (, !(= val_2 1) !(= x 2)))
  !(let (, !(= val_3 1) !(= a 2) !(= b c)))
  !(rec !(= val_4 1))
  !(rec (, !(= val_4 1) !(= a 1)))
  !(let !(= a (/ ((- (+ 42 10) 2)) 2)))
  !(let !(= () ()))
  !(let !(= () a))
  !(exception A)
  !(exception A t1)
  !(exception A t1 t2)
  !(external !(= !(: prim1 t) "x"))
  !(external !(= !(: prim2 !(-> t1 (t2 [A]))) "x"))
  !(sig
     !(=
        S
        {;
          !(external !(= !(: prim1 t) "x"))
          !(external !(= !(: prim2 !(-> t1 (t2 [A]))) "x"))}))
  !(let !(= A a))
  !(let !(= !(ident M A) a))
  !(let !(= !(ident M1 M2 A) a))
  !(let !(= (A 1) a))
  !(let !(= (!(ident M A) 1) a))
  !(let !(= (!(ident M1 M2 A) 1) a))
  !(let !(= (A 1 2) a))
  !(let !(= (!(ident M A) 1 2) a))
  !(let !(= (!(ident M1 M2 A) 1 2) a))
  !(let
     !(=
        (!(ident M1 M2 A)
          ((!(ident M3 B) 1))
          2
          ((!(ident M4 M5 C) (, 3 "x"))))
        a))
  !(let !(= [] x))
  !(let !(= [1] x))
  !(let !(= [, 1 2] x))
  !(let !(= [!(& (, 1 2) xs)] x))
  !(let !(= [!(& (, [] [, 1 2]) xs)] x))
  !(let !(= !(: 1 int) x))
  !(let !(= !(or A B) x))
  !(let !(= (f a) (+ a 1)))
  !(let !(= (f ()) ()))
  !(let !(= (f a b) (+ a b)))
  !(let !(= (f (!(: a int))) (+ a 1)))
  !(let !(= (f !(~ a)) a))
  !(let !(= (f !(~ (a))) a))
  !(let !(= (f !(~ (!(: a int)))) a))
  !(let !(= (f !(~ (!(as a b)))) b))
  !(let !(= (f !(~ (!(= a 1))) b) (+ a b)))
  !(let !(= (f !(~ (!(= !(as a b) 1))) c) (+ b c)))
  !(let !(= (f !(~ (!(= !(as a ((Some b))) x))) c) (+ b c)))
  !(let
     !(= (f !(~ (!(= !(as a (!(: (Some b) (option [int])))) x))) c) (+ b c)))
  !(let !(= (f !(~? a)) a))
  !(let !(= (f !(~ (!(as !(? a) b)))) b))
  !(type !(= f !(-> a b)))
  !(type !(= f !(-> a !(-> b !(-> c d)))))
  !(type !(= f !(-> !(~ (!(: a t))) b)))
  !(type !(= f !(-> x !(-> !(~ (!(: a t))) b))))
  !(type !(= f !(-> !(~ (!(: a t))) !(-> b c))))
  !(type !(= f !(-> !(~ (!(: !(? a) t))) b)))
  !(type !(= f !(-> !(~ (!(: a t))) !(-> !(~ (!(: !(? b) t))) c))))
  !(sig
     !(=
        S
        {;
          !(: v !(-> a b))
          !(: v !(-> a !(-> b !(-> c d))))
          !(: v !(-> !(~ (!(: a t))) b))
          !(: v !(-> x !(-> !(~ (!(: a t))) b)))
          !(: v !(-> !(~ (!(: a t))) !(-> b c)))
          !(: v !(-> !(~ (!(: !(? a) t))) b))
          !(: v !(-> !(~ (!(: a t))) !(-> !(~ (!(: !(? b) t))) c)))}))
  !(let !(= x (|> xs (!(ident List map) (!(fn {!(on !(-> x (+ x 1)))}))))))
  !(let
     !(= x (|> xs (!(ident List map) (!(fn {!(on !(-> 1 a) !(-> 2 b))}))))))
  !(mod !(= M1 X))
  !(mod !(= M1 !(ident M2 M3 X)))
  !(mod !(= M2 {}))
  !(mod !(= M3 {; !(let !(= a 1)) !(let !(= b 2))}))
  !(mod !(= !(: M4 {}) {}))
  !(mod !(= !(: M5 {!(: x int)}) {!(let !(= x 42))}))
  !(mod
     !(=
        !(: M6 {; !(: x int) !(: y int)})
        {; !(let !(= x 42)) !(let !(= y 2))}))
  !(sig !(= S1 {; !(: a int) !(: b bool)}))
  !(open M)
  !(let !(= !(: v_constraint_1 int) 42))
  !(let
     !(= !(: v_constraint_2 (list [(, string int)])) [, (, "a" 2) (, "b" 3)]))
  !(type t)
  !(type t [A])
  !(type t [, A B])
  !(type t [, A B C])
  !(type !(= t a))
  !(type !(= (t [A]) a))
  !(type !(= (t [, A B]) a))
  !(type !(= (t [, A B C]) a))
  !(type nonrec t)
  !(type nonrec t [A])
  !(type nonrec t [, A B])
  !(type nonrec t [, A B C])
  !(type !(= (nonrec t) a))
  !(type !(= (nonrec t [A]) a))
  !(type !(= (nonrec t [, A B]) a))
  !(type !(= (nonrec t [, A B C]) a))
  !(type !(= t a))
  !(type !(= t (list [a])))
  !(type !(= t (list [(list [a])])))
  !(type !(= t (, a b)))
  !(type !(= t (t [(, a b)])))
  !(type !(= t (t [, (, a b) X])))
  !(type !(= t (t [A])))
  !(type !(= t (t [, A B])))
  !(type !(= t (t [, A B C])))
  !(type !(= t (!(ident M t) [A])))
  !(type !(= t (!(ident M t) [, A B])))
  !(type !(= t (!(ident M t) [, A B C])))
  !(type !(= t (, int bool)))
  !(type !(= t A))
  !(type !(= t (A int)))
  !(type !(= t (A int string)))
  !(type !(= t {A}))
  !(type !(= t {(A int)}))
  !(type !(= t {(A int string)}))
  !(type !(= t {(A (, int string))}))
  !(type !(= t {!(| A B C)}))
  !(type !(= t {!(| A (B int bool))}))
  !(type !(= t (== u A)))
  !(type !(= t (== u {!(| A (B int))})))
  !(type !(= t {!(: a int)}))
  !(type !(= t {, !(: a int) !(: b (list [bool]))}))
  !(type !(= t (== u {, !(: a int) !(: b (list [bool]))})))
  !(type !(= t {, !(: a (mutable int)) !(: b (mutable ((list [bool]))))}))
  !(type !(= t {!(: a !(:: [A] int))}))
  !(type !(= t {!(: a !(:: [, A B] int))}))
  !(type !(= t {, !(: a !(:: [A] int)) !(: b !(:: [, B C D] B))}))
  !(type
     !(= t {!(: a !(:: [B] !(-> (t2 [B]) (option [!(-> (t3 [, C D]) D)]))))}))
  !(type !(= t !(: A int)))
  !(type !(= t !(: A !(-> int t))))
  !(type !(= t !(: A !(-> (, t1 t2) t3))))
  !(type !(= t !(: A !(-> (!(-> t1 t2)) t3))))
  !(type !(= (t [A]) !(: A (t [int]))))
  !(type !(= (t [A]) !(: A !(-> int (t [int])))))
  !(type !(= (t [A]) !(: A !(-> (, t1 t2) (t [t2])))))
  !(type !(= (t [A]) !(: A !(-> (!(-> t1 t2)) (t [!(-> t1 t2)])))))
  !(type !(= t {!(| !(: A a) !(: B b))}))
  !(type !(= t {!(| !(: A a) !(: B b) !(: C !(-> (, c1 c2) c3)))}))
  !(let !(: v !(type !(= !(:: [a] !(-> a int)) x))))
  !(let !(: v !(type !(= !(:: [, a b] !(-> (, a b) int)) x))))
  !(type !(= t {..}))
  !(type !(+= t A))
  !(type !(+= t (A int)))
  !(type !(+= t (A int bool)))
  !(type !(+= t (A (, int bool))))
  !(type !(+= (t [A]) A))
  !(type !(+= (t [, A B]) A))
  !(type !(+= t !(: A t)))
  !(type !(+= t !(: A !(-> a t))))
  !(type t [_])
  !(type !(+= (t [_]) A))
  !(type t [A'b])
  !(@ attr1 !(type a))
  !(@ attr2 !(external !(= !(: a t) "x")))
  !(let !(= x !(mc1 (2))))
  !(let !(= x (+ !(mc2 (2)) 1)))
  !(let !(= x !(mc3 {(< div > "hello" </ div >)})))
  !(let
     !(=
        x
        !(if {, !(-> (> a 1) "yes") !(-> (== a 0) "maybe") !(-> else "no")})))
  {; !(\ x) !(\ +) !(\ *) !(\ mod) !(\ x) !(\ mod) !(\ foo bar)})
