a;
f a b;
f a b c d e;
42;
();

// Values
x = 1;
x = 1, y = 2;

a = (42 + 10 - 2) / 2;
print_newline ();
print_endline (string_of_int (a + b));

// Constructors
x = None;
x = Some 1;
x = Some [1, 2, 3];
x = Two 1 2;
x = Two 1 2 |> f;

// Polymorphic variants
x = #A;
x = #A 42;
x = #A (2 + a);
x = #A a 42;
x = #A (b, 43);
x = #A |> f;
x = f #A #B;
x = f #A #B <| #C;

// Field and module access.
do {
  a.x;
  M.x;
  M.f x;
  f a.x;
  M.f x.a;
  //M.a.f x;
  // a.x1.x2;
  //a.x1.x2.x3;
  //f a.x1.x2;
  //M.a.f x.y.b;
  // (Set.Make M).t;
  fim
};

// Unit pattern, implicit let unit
() = ();
() = {
  let a = 1;
  a
};
() = {
  let a = 1
};
() = {
  let a = 1, b = 2
};
() = {
  let a = 1;
  let b = 2
};

do { let a = 1 };

// Scopes
// { }; // array? unit?
{ a };
{ a };
{ a; b };
{ a; b; c };
{
  a;
  let a = 1;
  a
};

// List expressions
x = [];
x = [1];
x = [1, 2];
x = [1, 2, 3];
x = [0 & xs];
x = [1, 2 & xs];

// List patterns
[] = x;
[1] = x;
[1, 2] = x;
[1, 2 & xs] = x;
[[], [1, 2] & xs] = x;

// Arrays
// x = {a};
// x = {a, b, c};

// Records
x = { a = "A", b = 1, c = 2 };
x = { ~a };
x = { a = 1 };
x = { ~a, b = 1 };
x = { a = 1, ~b };
x = { ~a, ~b, ~c };
x = { r & a = 23, b = 1 };
x = { r & a = 23, ~b };
x = { r & ~a, b = 1 };
x = { r & ~a, ~b };
x = { r & ~a };
x = { r & a = 1 };
x = {
  a = 1,
  f = x -> x + 1,
  g = x y -> x - y
};

// Lambda
f = a -> a + 1;
sum = a b -> a + b;

// This matches on an singleton array
// let f = fn {a} -> a + 1;

// This matches on a record
//let f = fn {~a} -> a + 1;

// This wraps a single case.
f = { a -> a + 1 };
//let f = fn {
//  | a -> a + 1
//  };
f = { a -> a + 1 } + 1;

// Lambda with cases
x = { a -> 1, b -> 2 };

// Lambda argument
// x = xs |> (List.map) { x -> x + 1 };

// if else
x = if a b c;
x = if a { x; b } { c };
x = if a { x; b } { y; c };
x = { if a { b } { c }; x };
x = if a { b } { c } + 1;
// err
//let x = if a { b } else c + 1;

// if
x = if a { b };
x = if a { print_newline (); b };
x = if a { b + 1 };
x = if a { b } + 1;
x = if a b + 1;
x = if a b c + 1;

// Syntax errors
//let x = if a; x then b else c;
//let x = if a then b; x else c;
// let + 1;

// match
x = match a {
  1 -> 0,
  2 -> b
};
x = match a { 1 -> 0 };
x = match (a + b) {
  1 -> 0,
  2 -> b
};
x = match a { 1 -> b, 2 -> c } + 100;
x = match a {
  1 -> {
    print_endline "1";
    a
  },
  2 -> b
};
x = match a {
  1 -> 0,
  x if x > 0 -> b,
  _ -> 1
};

// try
x = try (f ()) { a -> prerr_endline msg };
x = try (f ()) {
  a -> prerr_endline msg,
  b -> bar
};

// Module bindings
module M1 = X;
module M2 = {};
module M3 = {
  a = 1;
  b = 2
};

// Module bindings with constraint
module M4 : {} = {};
module M5 : { x : int } = { x = 42 };
module M6 : { x : int; y : int } = { x = 42; y = 2 };

// open
open M;
x = {
  let a = 1;
  open M;
  a
};
x = {
  open M;
  let a = 1;
  a
};

// if cases
x = if {
  a > 1 -> "yes",
  a == 0 -> "maybe",
  else -> "no"
};

// labels
// f ~a;
// f ~a:8;
// f ~a:8 ~a? ~a?:None;

// type record
//type person = { name : string, age : int, profession : option string };


//module Person = {
//  print = p -> print_endline (p.name ^ " " ^ string_of_int p.age)
//};
//
//p = { name = "Anonymous"; age = 0; profession = None };
//
//f ~a ?(opt = 0) ?use ~name x = {
//  ignore (a, opt, use, name, x);
//  opt
//};
//
//x = {
//  let* x = 2, y = (3, 'a')[
//  let age = 30 - fst y;
//  let person = { p & name = "Xavier"; age };
//  Person.print person;
//  let result = {
//    let a, opt, foo = (1, None, Some (if age > 30 then 0 else 10));
//    f ~a ?opt ?use:foo ~name:"hello" x
//  };
//  let* map : ('a -> 'b) -> 'a list -> 'b list =
//    f l ->
//      match l {
//        [] -> [],
//        [x & xs] -> [f x & map f xs]
//      };
//  x + result - { let z = p.age; z * 2 }
//}

// Macro calls

x = mc1! (2);
x = mc2! (2) + 1;
x = mc3! { <div> "hello" </div> };
//x = mc1! a b;
//x = mc1! a b + 1;

// PPX

// Extension
//x = extension! (env "HOME");

//do {
  // [%env "HOME"]
  //env! "HOME";

  // [%pp: int list]
  //pp! "HOME";

  // [%view? (Some _ as x) :: []]
  //pp! "HOME";

  // [%mody let x = 1;; let y = 2]
  //pp! "HOME";

  // [%sigy: val x : int;; val y : bool]
  //pp! "HOME"
//};


// while
do {
  while e1 e2;
  while (x > 1) {
    print "hello";
    f ()
  }
};

// for
do {
  for (i = e1 to e2) e3;
  for (i = e1 downto e2) e3;
  for (i = e1 to e2) {
    print "hello";
    f ()
  }
};

// constraint
do {
  x : t;
  2 + (x : int) * 2;
  // 2 + f x y : int * 2;
  f (x : int) y;
  f (xs : list int)
};

// value constraint
v_constraint_1 : int = 42;
v_constraint_2 : list (string, int) = [("a", 2), ("b", 3)];
// v_constraint_3 : type a . a = a;
// v_constraint_4 : 'a . 'a  = a;

// type
type t;
type nonrec t;
type t = int;
type t = list int;
type t = list (list int);
type nonrec t = int;

// type tuple
type t = (int, bool);

// type variant
type t = A;
type t = A int;
type t = A int string;
type t = { A };
type t = { A int };
type t = { A int string };
type t = { A (int, string) };

type t = { A | B | C };
type t = { A | B int bool };

type t = u = A;
type t = u = { A | B int };

// type record
type t = { a : int, b : list bool };
type t = u = { a : int, b : list bool };
type t = { a : mutable int, b : mutable (list bool) };
type t = ..;

// type private
// @private
// type t = int;

// @(derive debug)
// type t = int;

// @[
//   derive debug,
//   abstract,
//   private,
//   constraint { 'a = float, 'b = (int, 'a) }
// ]
// type t = int;

// @(derive debug)
// @abstract
// @private
// @(constraint { 'a = float, 'b = (int, 'a) })
// type t = int;

// type constraints
// type t = int constraint t1 = t2;
// @constraint (a = int list, b = _ option)
// type t = X a b,
//   constraint a = int list,
//   constraint b = _ option;
// type t = {
// a : int
// } constraint t1 = t2
// constraint t3 = t4;

// (type t {
//   a : int
// } :constraint (= t1 t2)
// :constraint (= t1 t2))

// @(constraint 'a = list (float, 'b))
// type t 'a = {
//   x : int,
//   y : 'a
// };

// @private
// @constraint (a = int list)
// @(constraint (b = _ option)
// type t = { a : int };

// @(deriving json)
// type t = { a : int };

// @deriving json 42
// type t = { a : int };

fim
