a;
f a b;
42;
();


// Values
x = 1;
x = 1, y = 2;

a = (42 + 10 - 2) / 2;
print_newline ();
print_endline (string_of_int (a + b));


// Constructors
x = None;
x = Some 1;
x = Some [1, 2, 3];
x = Two 1 2;
x = Two 1 2 |> f;

// Field and module access.
do {
  a.x;
  //a.x1.x2;
  //a.x1.x2.x3;
  M.x
  //f a.x;
  //f a.x1.x2;
  //M.f x;
  //M.a.f x;
  //M.f x.a;
  //M.a.f x.y.b
};

// Unit pattern, implicit let unit
() = ();
() = {
  let a = 1;
  a
};
() = {
  let a = 1
};
() = {
  let a = 1, b = 2
};
() = {
  let a = 1;
  let b = 2
};

// Scopes
// { }; // array? unit?
{ print_endline "hello" };
{
  print_endline "hello";
  print_endline "world"
};


// Lists
xs = [];
xs = [1];
xs = [1, 2];
xs = [1, 2, 3];
xs = [0 & xs];
xs = [1, 2 & xs];

// Records
//let x = { name = "Alan", age = 28 }
//let x = { alan & name = "Alan" }

// Lambda
f = a -> a + 1;
sum = a b -> a + b;

// This matches on an singleton array
// let f = fn {a} -> a + 1;

// This matches on a record
//let f = fn {~a} -> a + 1;

// This wraps a single case.
f = { a -> a + 1 };
//let f = fn {
//  | a -> a + 1
//  };
// [BUG] + should beat fn.
f = { a -> a + 1 } + 1;

// Lambda with cases
x = { a -> 1, b -> 2 };

// if else
x = if a b c;
x = if a { x; b } { c };
x = if a { x; b } { y; c };
x = { if a { b } { c }; x };
x = if a { b } { c } + 1;
// err
//let x = if a { b } else c + 1;

// if
x = if a { b };
x = if a { print_newline (); b };
x = if a { b + 1 };
x = if a { b } + 1;

// Syntax errors
//let x = if a; x then b else c;
//let x = if a then b; x else c;
// let + 1;

// match
x =
  match a {
    1 -> 0,
    2 -> b
  };
x =
  match (a + b) {
    1 -> 0,
    2 -> b
  };
x = match a { 1 -> b, 2 -> c } + 100;
x =
  match a {
    1 -> {
      print_endline "1";
      a
    },
    2 -> b
  };

// Module bindings
module M1 = X;
module M2 = {};
module M3 = {
  a = 1;
  b = 2
};

// open
open M;
x = {
  let a = 1;
  open M;
  a
};
x = {
  open M;
  let a = 1;
  a
};

// if cases
x = if {
  a > 1 -> "yes",
  a == 0 -> "maybe",
  else -> "no"
};

// type record
//type person = { name : string, age : int, profession : option string };


//module Person = {
//  print = p -> print_endline (p.name ^ " " ^ string_of_int p.age)
//};
//
//p = { name = "Anonymous"; age = 0; profession = None };
//
//f ~a ?(opt = 0) ?use ~name x = {
//  ignore (a, opt, use, name, x);
//  opt
//};
//
//x = {
//  let* x = 2, y = (3, 'a')[
//  let age = 30 - fst y;
//  let person = { p & name = "Xavier"; age };
//  Person.print person;
//  let result = {
//    let a, opt, foo = (1, None, Some (if age > 30 then 0 else 10));
//    f ~a ?opt ?use:foo ~name:"hello" x
//  };
//  let* map : ('a -> 'b) -> 'a list -> 'b list =
//    f l ->
//      match l {
//        [] -> [],
//        [x & xs] -> [f x & map f xs]
//      };
//  x + result - { let z = p.age; z * 2 }
//}

// Macro calls

x = mc1! (2);
x = mc2! (2) + 1;
x = mc3! { <div> "hello" </div> };
//x = mc1! a b;
//x = mc1! a b + 1;

fim