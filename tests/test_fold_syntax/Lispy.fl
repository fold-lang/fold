// @fold { version = "1.0" };

do {
  a;
  f a b;
  f a b c d e;
  42;
  ();
};

// Constructors
val x = None;
val x = Some 1;
val x = Some [1, 2, 3];
val x = Two 1 2;
val x = Two 1 2 |> f;

// Polymorphic variants
val x = #A;
val x = #A #B;
val x = #A 42;
val x = #A (2 + a);
val x = #A a 42;
val x = #A (b, 43);
val x = #A |> f;
val x = f #A #B;
val x = f #A #B <| #C;

// Field and mod access.
do {
  // value access
  M.x;
  M.x1.x2;
  M1.M2.x;
  M1.M2.x1.x2;
  M1.M2.M3.x;
  M1.M2.M3.x1.x2.x3;

  // constructor access
  M.C;
  M1.M2.C;
  M1.M2.M3.C;

  // field access
  r.fld;
  (foo 42).fld;
  (M1.M2.r).fld;
  M1.M2.r.fld;
  M.r.fld;
  M.x1.x2.x3.x4;

  // qualified field access
  x1.(M.x2);
  x1.(M1.M2.x2);
  x1.x2.(M1.x3);

  // constructor expressions (semantically incorrect)
  // NOTE: might be incorrectly printed by OCaml's Pprintast.
  (C).fld;
  (M.C).fld;
  (M1.M2.C).fld;
  
  // qualified function apply
  M.f v;
  M1.M2.f v;
  M1.M2.M3.f v;

  // qualified constructor apply
  M.C v;
  M1.M2.C v;
  M1.M2.M3.C v;

  // qualified function arg
  f M.v;
  f M1.M2.v;
  f M1.M2.M3.v;
  
  // field function arg
  f r.fld;
  f r.(M.fld);
  f r.(M1.M2.fld);
  f M1.r.fld;

  // qualified constructor arg
  C M.v;
  C M1.M2.v;
  C M1.M2.M3.v;

  // qualified apply misc
  M.f M.v;
  M1.f r.(M2.fld);
  M1.M2.f M3.M4.v;
  M1.M2.f r.(M3.M4.M5.fld);
  M.r.fld v;

  // TODO local open
  // M.(a + b)
  // M.(x1.x2)
  // M.(x1).x2
  // M1.(x1).(M2.x2)

  // TODO type ident
  // (Set.Make M).t;

  // Deep.
  M.M.M.M.M;
  x.x.x.x.x;

  // Edge cases
  x1.x2.(M1.M2.x4).(M3.x5);
  M1.M2.x1.x2.(M3.M4.x4).(M5.x6);
  M1.x1.x2.(x3);
  M1.x1.x2.x3.(x4);
  M1.x1.(x2).x3.(x4).(M2.M3.x5);
  x1.(x2).(x3).(x4);
  M1.M2.f a M3.b (g M4.c d e);
  f a (M3.g 2) (f2 M4.M5.x) (h M6.c d e);
  f M.a b;

  // errors
  // r.M;
  // r.M.x;
  // x1.(M2.x2.x3); // expected ident
};


// --- val ---

val val_1 = 1;
val val_2 = 1, x = 2;
val val_3 = 1, a = 2, b = c;
rec val_4 = 1;
rec val_4 = 1, a = 1;
val a = (42 + 10 - 2) / 2;

val () = ();
val () = a;


// --- expr ---


val l01 = [[]];
val l02 = [[[]]];
val l03 = [[1], [2], [], [3, 4], [5]];
val l04 = [];
val l05 = [1];
val l06 = [1, 2];
val l07 = [1, 2, 3];
val l08 = [0 & xs];
val l09 = [1, 2 & xs];
val l10 = [1 & [2]];
val l11 = [1 & [2 & [3, 4]]];
val l12 = [1, 2 & [3, 4 & [5, 6]]];


// --- eval item ---

();
print_newline ();
print_endline (string_of_int (a + b));


// --- let ---

val let_01 = {
  let a = 1;
  a + 1
};

val let_02 = {
  let a = 1;
  let b = a + 1;
  Ok b
};

val let_03 = {
  let
    a = 1,
    b = 2;
  Ok (a + b)
};

val let_04 = {
  rec xs = [1 & xs];
  Ok xs
};

val let_05 = {
  rec
    a = 2 - b,
    b = a + 1;
  Ok (a + b)
};

val let_06 = {
  let x = 42;
  rec
    a = 2 - b,
    b = a + 1;
  Ok (a + b)
};

val let_07 = {
  let a = 1
};

val let_08 = {
  let a = 1, b = 2
};

val let_09 = {
  let a = 1;
  let b = 2;
};


// Scopes
// { }; // array? unit?
// { ; }; // empty block? unit?
{ a };
{ a; };
{ a; b };
{ a; b; };
{ a; b; c; };
{ a; b; c };
{
  f ();
  let a = 1;
  a
};

// List patterns
val [] = x;
val [1] = x;
val [1, 2] = x;
val [1, 2 & xs] = x;
val [[], [1, 2] & xs] = x;

// pattern constraint
val 1 : int = x;

// or pattern
val A | B = x;

// Arrays
// x = {a};
// x = {a, b, c};

// create record
val r01 = { a = "A", b = 1, c = 2 };
val r02 = { ~a };
val r03 = { a = 1 };
val r04 = { ~a, b = 1 };
val r05 = { a = 1, ~b };
val r06 = { ~a, ~b, ~c };
val r07 = {
  a = 1,
  f = fn x -> x + 1,
  g = fn x y -> x - y
};

// update record
val r08 = { r & a = 23, b = 1 };
val r09 = { r & a = 23, ~b };
val r10 = { r & ~a, b = 1 };
val r11 = { r & ~a };
val r12 = { r & ~a, ~b };
val r13 = { r & a = 1 };

// Lambda
val f = fn a -> a + 1;
val f = fn () -> ();
val f = fn a b -> a + b;
val f = fn (a : int) -> a + 1;
val f = fn ~a -> a;
val f = fn ~(a) -> a;
val f = fn ~(a : int) -> a;
val f = fn ~(a as b) -> b;
val f = fn ~(a = 1) b -> a + b;
val f = fn ~(a as b = 1) c -> b + c;
val f = fn ~(a as (Some b) = x) c -> b + c;
//f = ~(a as (Some b) : option int = x) c -> b + c;
val f = fn ~(a as (Some b : option int) = x) c -> b + c;
val f = fn ~a? -> a;
val f = fn ~(a? as b) -> b;

// apply labels
do {
  f ~a;
  f ~(a);
  f ~(a = 1);
  f ~(a : int);
  f ~(a : int = 1);
  f ~a?;
  f ~(a?);
  f ~(a? = b);
  f ~(a? : int option = b);

  // errors
  // f ~M;
  // f ~2;
};


// --- core type arrow ---

type f = a -> b;
type f = a -> b -> c -> d;
type f = ~(a : t) -> b;
type f = x -> ~(a : t) -> b;
type f = ~(a : t) -> b -> c;
type f = ~(a? : t) -> b;
type f = ~(a : t) -> ~(b? : t) -> c;

sig S = {
  val v : a -> b;
  val v : a -> b -> c -> d;
  val v : ~(a : t) -> b;
  val v : x -> ~(a : t) -> b;
  val v : ~(a : t) -> b -> c;
  val v : ~(a? : t) -> b;
  val v : ~(a : t) -> ~(b? : t) -> c;
};

// This matches on an singleton array
// let f = fn {a} -> a + 1;

// This matches on a record
//let f = fn {~a} -> a + 1;

// This wraps a single case.
val f = fn { a -> a + 1 };
val f = fn { a -> a + 1 } + 1;
val f = fn { a -> 1, b -> 2 };
val f = fn { a -> 1, (A | B) -> 2 };

// Lambda argument
val x = xs |> List.map (fn { x -> x + 1 });
//val x = xs |> List.map (fn { 1 -> a, 2 -> b });

// if else
val x = if a b c;
val x = if a { x; b } { c };
val x = if a { x; b; } { y; c; };
val x = { if a { b } { c }; x; };
val x = if a { b } { c } + 1;
val x = if a b c + 1;
// err
//let x = if a { b } else c + 1;

// if
val x = if a { b };
val x = if a { print_newline (); b; };
val x = if a { b + 1 };
val x = if a { b } + 1;
val x = if a b + 1;

// Syntax errors
//let x = if a; x then b else c;
//let x = if a then b; x else c;
// let + 1;

// match
val x = match a {
  1 -> 0,
  2 -> b
};
val x = match a { 1 -> 0 };
val x = match (a + b) {
  1 -> 0,
  2 -> b
};
val x = match a { 1 -> b, 2 -> c } + 100;
val x = match a {
  1 -> {
    print_endline "1";
    a
  },
  2 -> b
};
val x = match a {
  1 -> 0,
  x if x > 0 -> b,
  _ -> 1
};
// "lambda match"
val m = a |> fn {
  1 -> 0,
  2 -> b
};

// match refute?
// x = match a { _ -> . };

// try
val x = try (f ()) { a -> prerr_endline msg };
val x = try (f ()) {
  a -> prerr_endline msg,
  b -> bar
};

// Module bindings
mod M1 = X;
mod M1 = M2.M3.X;
mod M2 = {};
mod M3 = {
  val a = 1;
  val b = 2;
};

// Module bindings with constraint
mod M4 : {} = {};
mod M5 : { val x : int } = { val x = 42 };
mod M6 : { val x : int; val y : int; } = { val x = 42; val y = 2; };

// Module type
sig S1 = {
  val a : int;
  val b : bool;
};

// open
open M;
val x = {
  let a = 1;
  open M;
  a;
};

val x = {
  open M;
  let a = 1;
  a;
};


// PPX

// Extension
//x = extension! (env "HOME");

//do {
  // [%env "HOME"]
  //env! "HOME";

  // [%pp: int list]
  //pp! "HOME";

  // [%view? (Some _ as x) :: []]
  //pp! "HOME";

  // [%mody let x = 1;; let y = 2]
  //pp! "HOME";

  // [%sigy: val x : int;; val y : bool]
  //pp! "HOME"
//};

// while
do {
  while e1 e2;
  while (x > 1) {
    print "hello";
    f ();
  };
};

// for
do {
  for (i = e1 to e2) e3;
  for (i = e1 downto e2) e3;
  for (i = e1 to e2) {
    print "hello";
    f ();
  };
};

// constraint
// if tight prec cannot be used for :, consider forcing (_ : _).
do {
  x : t;
  2 + (x : int) * 2;
  // 2 + f x y : int * 2;
  f (x : int) y;
  f (xs : list int);
};

// value constraint
val v_constraint_1 : int = 42;
val v_constraint_2 : list (string, int) = [("a", 2), ("b", 3)];
// v_constraint_3 : type a . a = a;
// v_constraint_4 : 'a . 'a  = a;

// type
type t;
type nonrec t;
type t = int;
type t = list int;
type t = list (list int);
type nonrec t = int;
//type t = x a b (y c d e);
//type t = M1.M2.x a M3.b (y M4.c d e);

// type tuple
type t = (int, bool);

// type variant
type t = A;
type t = A int;
type t = A int string;
type t = { A };
type t = { A int };
type t = { A int string };
type t = { A (int, string) };

type t = { A | B | C };
type t = { A | B int bool };

type t = u == A;
type t = u == { A | B int };

// type record
type t = { a : int, b : list bool };
type t = u == { a : int, b : list bool };
type t = { a : mutable int, b : mutable (list bool) };
type t = ..;

// type private
// @private
// type t = int;

// @(derive debug)
// type t = int;

// @[
//   derive debug,
//   abstract,
//   private,
//   constraint { 'a = float, 'b = (int, 'a) }
// ]
// type t = int;

// @(derive debug)
// @abstract
// @private
// @(constraint { 'a = float, 'b = (int, 'a) })
// type t = int;

// type constraints
// type t = int constraint t1 = t2;
// @constraint (a = int list, b = _ option)
// type t = X a b,
//   constraint a = int list,
//   constraint b = _ option;
// type t = {
// a : int
// } constraint t1 = t2
// constraint t3 = t4;

// (type t {
//   a : int
// } :constraint (= t1 t2)
// :constraint (= t1 t2))

// @(constraint 'a = list (float, 'b))
// type t 'a = {
//   x : int,
//   y : 'a
// };

// @private
// @constraint (a = int list)
// @(constraint (b = _ option)
// type t = { a : int };

// @(deriving json)
// type t = { a : int };

// @deriving json 42
// type t = { a : int };


// Extras

// Macro calls

val x = mc1! (2);
val x = mc2! (2) + 1;
val x = mc3! { <div> "hello" </div> };
//x = mc1! a b;
//x = mc1! a b + 1;

// field acessors
// do {
//   .x;
//   .x1.x2;
//   map (.x1) xs;
//   map (.x1.x2) xs;
// };


// use
// use List {map; fold_left as fold; type json; mod Map};
// use List.fold_left;
// use String.Map as Smap;
// use String.Map as Smap { ... };

// if cases
val x = if {
  a > 1 -> "yes",
  a == 0 -> "maybe",
  else -> "no"
};

// lambda with holes
// List.map (f _ x)


//do {
//  match (Some 2) {
//    Some x -> f 2
//    None -> ()
//  }
//}