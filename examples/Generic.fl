module M1 = {
  val main = {
    let rec x = 2 and y = (3, 'a');
    let person = {
      name = String.capitalize_ascii "xavier",
      ~age,
      ..p
    };
    Person.print person;
    List.iter (fn ~l:m ~a?:(x = 1) ~b? ~c?:d foo -> {
        print_endline "foo";
        a;
      })
      items;
    let result = f ~a ~opt? ~use?:foo ~name:"hello" x;
    let a = ({}, {1, 2, 3});
    let l = ([], [1, 2, 3], [1, 2, 3]);
    let l = ([x1, x2, ..xs], [x1, x2, x3]);
    let l = [1, 2, 3, ..tl];
    let c = (None, Some 1);
    let c = (Both 1 2, Ambos (1, 2));
    let c = ((::) 1, [] (2, 3));
    x + y - {
      let z = p.age;
      z * 2;
    };
  };
};

module M2 = {};

module M3 = {
  val main = {
    for i = 1 to 10 do {
      print_endline "Number: ";
      print_int i;
      print_newline ();
    };
    print_endline "Done.";
  };
  val f x =
    match x with {
    | [] -> "zero"
    | [1, 2, 3] -> "some"
    | [1, 2, 3] -> "someish"
    | [1, 2, 3, .."nop"] -> "nop"
    };
};

