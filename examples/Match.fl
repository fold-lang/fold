val rec pp_id out (id : id) =
  match id with {
  | Lident "" -> ()
  | Lident s if match String.get s 0 with {
  | {
  | XXX: interval
  | XXX: interval
  | '_'
  | '\''
  | '('
  } ->
    false
  | _ -> true
  } ->
    Fmt.parens Fmt.string out s
  | Lident s -> Fmt.string out s
  | Ldot (y, s) -> Fmt.pf out "%a.%s" pp_id y s
  | Lapply (y, s) -> Fmt.pf out "%a(%a)" pp_id y pp_id s
  };

val m01 =
  match name with {
  | Some x -> {
      print_endline x;
      "Hello, " ^ x;
    }
  | None -> "Goodye!"
  };

val rec do_transform (continuation : unit -> action 'a)
    (state : 'acc)
    (f : 'acc -> 'a -> step 'b 'acc) : unit -> action 'b =
  fn () ->
    match continuation () with {
    | Stop -> Stop
    | Continue (el, next) ->
      match f (state, el) with {
      | Done -> Stop
      | Next (yield, next_state) ->
        Continue (yield, do_transform next next_state f)
      }
    };

