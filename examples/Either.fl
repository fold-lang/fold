// https://github.com/ocaml/ocaml/blob/trunk/stdlib/either.ml

type t[A, B] = { Left A | Right B };

let left v = Left v;
let right v = Right v;

let is_left = fn {
  on Left _ -> True
  on Right _ -> False
};

let is_right = fn {
  on Left _ -> False
  on Right _ -> True
};

let find_left = fn {
  on Left v -> Some v
  on Right _ -> None
};

let find_right = fn {
  on Left _ -> None
  on Right v -> Some v
};

let map_left f = fn {
  on Left v -> Left (f v)
  on Right _ as e -> e
};

let map_right f = fn {
  on Left _ as e -> e
  on Right v -> Right (f v)
};

let map ~left ~right = fn {
  on Left v -> Left (left v)
  on Right v -> Right (right v)
};

let fold ~left ~right = fn {
  on Left v -> left v
  on Right v -> right v
};

let iter = fold;
let for_all = fold;

let equal ~left ~right e1 e2 =
  match (e1, e2) {
    on (Left v1, Left v2) -> left v1 v2
    on (Right v1, Right v2) -> right v1 v2
    on (Left _, Right _) or (Right _, Left _) -> False
  };

let compare ~left ~right e1 e2 =
  match (e1, e2) {
    on (Left v1, Left v2) -> left v1 v2
    on (Right v1, Right v2) -> right v1 v2
    on (Left _, Right _) -> -1
    on (Right _, Left _) -> 1
  };

