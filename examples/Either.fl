// https://github.com/ocaml/ocaml/blob/trunk/stdlib/either.ml

//type ('a, 'b) t = Left of 'a | Right of 'b
//type t = { Left 'a | Right 'b };

open Stdlib.Either;

left = v -> Left v;
right = v -> Right v;

is_left = {
  Left _ -> True,
  Right _ -> False
};

is_right = {
  Left _ -> False,
  Right _ -> True
};

find_left = {
  Left v -> Some v,
  Right _ -> None
};

find_right = {
  Left _ -> None,
  Right v -> Some v
};

map_left = f -> {
  Left v -> Left (f v),
  Right _ as e -> e
};

map_right = f -> {
  Left _ as e -> e,
  Right v -> Right (f v)
};

map = ~left ~right -> {
  Left v -> Left (left v),
  Right v -> Right (right v)
};

fold = ~left ~right -> {
  Left v -> left v,
  Right v -> right v
};

iter = fold;
for_all = fold;

equal = ~left ~right e1 e2 ->
  match (e1, e2) {
    (Left v1, Left v2) -> left v1 v2,
    (Right v1, Right v2) -> right v1 v2,
    (Left _, Right _) | (Right _, Left _) -> False
  };

compare = ~left ~right e1 e2 ->
  match (e1, e2) {
    (Left v1, Left v2) -> left v1 v2,
    (Right v1, Right v2) -> right v1 v2,
    (Left _, Right _) -> -1,
    (Right _, Left _) -> 1
  };

