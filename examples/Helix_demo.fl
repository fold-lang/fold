module Console = Stdweb.Console;

open Helix;

open Stdweb.Dom;

val bool a b c = if c then a else b;

val a => b = (a, b);

val view_mouse () = {
  let mouse =
    Mouse.position
    |> Signal.sample ~on:(Time.tick ~ms:(1000 / 60))
    |> Signal.map (fn (x, y) ->
        "x = " ^ string_of_float x ^ ", y = " ^ string_of_float y);
  open Html;
  fragment [
    h2 [style ["font-family" => "monospace"]]
      [text "Mouse.position"],
    div [style ["margin-bottom" => "20px"]]
      [text "Render mouse position."], View.show text mouse
  ];
};

val view_timer () = {
  let timer =
    Time.tick ~ms:333
    |> Signal.const 1
    |> Signal.reduce (+) 0;
  open Html;
  fragment [
    h2 [style ["font-family" => "monospace"]] [text "Time.tick"],
    div [style ["margin-bottom" => "20px"]] [text "Render a timer."],
    View.show int timer
  ];
};

val view_input_bind () = {
  let input_signal = Signal.make "--";
  open Html;
  fragment [
    h2 [style ["font-family" => "monospace"]] [text "Html.emit"],
    div [style ["margin-bottom" => "20px"]]
      [text "Sync input content with two elements."],
    input [
      placeholder "Type something amazing...",
      on_input (fn ev ->
          Signal.emit (Event.target_value ev) input_signal)
    ],
    ul []
      [
        li [] [View.show text input_signal],
        li []
          [
            View.show text
              (input_signal
              |> Signal.map String.uppercase_ascii)
          ]
      ]
  ];
};

val view_counter () = {
  let incr = Signal.make 0;
  let count =
    incr
    |> Signal.reduce (fn x y -> x + y)
      0;
  open Html;
  fragment [
    h2 [style ["font-family" => "monospace"]] [text "Html.select"],
    div [style ["margin-bottom" => "20px"]]
      [text "Compute a count."],
    div []
      [
        button [on_click (fn _ -> Signal.emit 1 incr)] [text "+"],
        button [on_click (fn _ -> Signal.emit (-1) incr)] [text "-"],
        span [style ["margin-left" => "5px"]] [View.show int count]
      ]
  ];
};

val view_show () = {
  open Html;
  fragment [
    h2 [style ["font-family" => "monospace"]] [text "Html.show"],
    div [style ["margin-bottom" => "20px"]]
      [text "Render signal value with function."],
    div [] [View.show int (Signal.make 5)]
  ];
};

val view_toggle () = {
  let stylish = Signal.make true;
  open Html;
  fragment [
    h2 [style ["font-family" => "monospace"]] [text "Html.toggle"],
    div [style ["margin-bottom" => "20px"]]
      [text "show attributes."],
    button [on_click (fn _ -> Signal.update not stylish)]
      [text "Style/unstyle element!"],
    div [
        View.toggle ~on:stylish (style ["background-color" => "cyan"])
      ]
      [text "This element has show attributes!"]
  ];
};

val view_visibility () = {
  let editing_state = Signal.make (false, "Edit me!");
  open Html;
  fragment [
    h2 [style ["font-family" => "monospace"]] [text "Html.visible"],
    div [style ["margin-bottom" => "20px"]]
      [text "Set visibility based on signal value."],
    button [
        on_click (fn _ ->
            Signal.update (fn (editing, x) -> (not editing, x))
              editing_state)
      ]
      [
        View.show text
          (Signal.map (fn (editing, text) ->
              if editing then "Save!" else text)
            editing_state)
      ],
    input [
      View.visible ~on:(Signal.map fst editing_state),
      style ["margin-left" => "5px"],
      on_input (fn ev ->
          Signal.update (fn (editing, _) -> (editing,
              Event.target_value ev))
            editing_state)
    ]
  ];
};

val view_visibility_simple () = {
  let is_visible = Signal.make false;
  open Html;
  fragment [
    h2 [style ["font-family" => "monospace"]] [text "Html.visible"],
    button [on Event.click (fn _ -> Signal.update not is_visible)]
      [View.show text (Signal.map (bool "Hide" "Show") is_visible)],
    span [View.visible ~on:is_visible] [text "HELLO"]
  ];
};

val view_each () = {
  let items =
    Time.tick ~ms:1000
    |> Signal.map (fn () ->
        List.init (1 + Random.int 10) string_of_int);
  open Html;
  fragment [
    h2 [style ["font-family" => "monospace"]] [text "Html.each"],
    div [style ["margin-bottom" => "20px"]] [text "show lists."],
    ul [
        style [
          "outline" => "1px solid pink", "height" => "200px",
          "overflow-y" => "scroll"
        ]
      ]
      [
        li [] [Html.text "fixed li before 1"],
        View.each (fn item -> li [] [Html.text ("each-1: " ^ item)])
          items,
        View.each (fn item -> li [] [Html.text ("each-2: " ^ item)])
          items, li [] [Html.text "fixed li after 2"]
      ]
  ];
};

val main () = {
  open Html;
  div [class_list ["w-full"]]
    [
      h1 [] [text "Helix Demo"], view_mouse (),
      view_visibility_simple (), view_timer (), view_input_bind (),
      view_counter (), view_visibility (), view_show (),
      view_toggle (), view_each ()
    ];
};

val () =
  match Document.get_element_by_id "root" with {
  | Some root -> Html.render root (main ())
  | None -> failwith "No #root element found"
  };

